6th BoB Crypto Session
29 Aug, 2017

고탁균
hazyheyjude@gmail.com




* 시작하기 전에
오늘 이야기할 내용

- 현대 암호와 해독 접근 방법

	대칭키 암호
	공개키 암호
	PKI
	SSL
	기타 등등
	암호 해독 이론 > 다음에... ㅠ

하지 않을 내용

- 수학 (나도 잘 모름ㅋ)


* 현대 암호 분류

대칭키 암호 (= 비밀키 암호, 관용 암호)

- 블록 암호
- 스트림 암호

공개키 암호 (= 비대칭키 암호)

- 소인수분해 기반
- 이산대수 기반

해시 (= 메시지 다이제스트)


* 새로운 데이터 암호에 대한 필요성

냉전시대 정보전에 너무 클린앤클리어해도 되나...?
.image http://127.0.0.1:3999/public/resources/notclean.png _ 200
.caption 노노!

암호 알고리즘의 투명성

.image http://cfile27.uf.tistory.com/image/12170E3D513BE2D806F1A4 _ 300
.caption 커코프 : "아놔..."


* 블록 암호의 설계 : 확산과 혼돈

암호 알고리즘의 통계적 분석을 어렵게 함

혼돈(Confusion)

- 평문을 1비트 바꿨을 때, 암호문의 출력은 예측 불가해야 함

	ex) 0x0001을 암호화 한 값이 0x0002를 암호화 한 값과 n만큼 차이가 나더라...

- 키-암호문 연관성
- 보통 치환(substitution)으로 구현


확산(Diffusion)

- 평문의 비트 구성이 암호문 비트 구성 전반에 걸쳐 퍼져있어야 함

	ex) 0x0000를 암호화 한 값과 0x0010를 암호화 한 값이 1비트만 다르더라...

- 평문-암호문 연관성
- 보통 순열(permutation)로 구현


* 데이터 암호 표준 (Data Encryption Standard)

DES

- IBM의 Feistel이 고안한 Lucifer 암호 기반 (비밀리에 많은 수정이 이루어짐)
- 최초의 데이터 암호 표준으로 선정하고 (수정하여) DES라는 이름을 붙임

Feistel 네트워크 방식

- 단순한 교차를 여러번 반복한 구조

.image http://alessiorolleri.wikidot.com/local--files/cifrario-feistel/feistel.png _ 250




* DES의 암호화
초기 단계

	평문을 64비트 데이터 블록으로 쪼갬
	쪼갠 블록을 다시 오른쪽 32비트(R0)와 왼쪽 32비트(L0)로 나눔
	초기 64비트 키를 이용해 16개의 48비트 라운드 키(K0~K15)를 계산함 => "키 스케줄링"

페이스텔 네트워크

	<1 라운드>
	1. R0과 라운드 키 K0을 라운드 함수 F에 넣어 결과 R0'를 얻음
	2. R0'와 L0을 xor해서 R1로 만듬
	3. R0을 L1로 만듬

	라운드 반복
	...

	<16 라운드>
	1. R14와 라운드 키 K14를 라운드 함수 F에 넣어 결과 R14'를 얻음
	2. R14'와 L14을 xor해서 R15를 만듬
	3. R14를 최종R로 만듬
	4. R15를 최종L로 만듬
	
	암호화된 블록 = 최종L + 최종R

* DES의 구조

.image http://127.0.0.1:3999/public/resources/des.png _ 458
.caption 개복잡...ㅠ

* DES의 키 스케줄링

.image https://www.projectrhea.org/rhea/images/4/4e/KS3.png _ 350

* DES의 라운드 함수

.image https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Data_Encription_Standard_Flow_Diagram.svg/375px-Data_Encription_Standard_Flow_Diagram.svg.png
.caption 32bits Block

* DES의 취약점 - Small key space

키 사이즈가 작기 때문에 전사 공격에 취약함

- 실제 사용되는 키 데이터는 56비트
- 1999년 EFF(Electronic Frotier Foundation)는 Deep Crack이라는 머신을 이용해 22시간만에 크랙 성공

.image http://www.oocities.org/eoinward/images/Image10.jpg _ 400
.caption 총 $260,000 개꿀ㅋ

* DES의 취약점 - 취약한 키 스케줄 알고리즘

- 취약키 4개 : E(E(p, k), k) = p

	0x01010101 01010101 -> 0x0000000 0000000
	0xFEFEFEFE FEFEFEFE -> 0x0000000 FFFFFFF
	0xE0E0E0E0 E0E0E0E0 -> 0xFFFFFFF 0000000
	0x1F1F1F1F 1F1F1F1F -> 0xFFFFFFF FFFFFFF

	=> 동일한 라운드키만 생성됨

- 준취약키 6쌍 : E(E(p, k1), k2) = p

	k1 : 0x011F011F010E010E, k2 : 0x1F011F010E010E01
	k1 : 0x01E001E001F101F1, k2 : 0xE001E001F101F101
	k1 : 0x01FE01FE01FE01FE, k2 : 0xFE01FE01FE01FE01
	k1 : 0x1FE01FE00EF10EF1, k2 : 0xE01FE01FF10EF10E
	k1 : 0x1FFE1FFE0EFE0EFE, k2 : 0xFE1FFE1FFE0EFE0E
	k1 : 0xE0FEE0FEF1FEF1FE, k2 : 0xFEE0FEE0FEF1FEF1

	=> 2개의 라운드 키가 교차적으로 생성됨

* 3DES

단순한 키 확장 방식

- 암호화 -> 복호화 -> 암호화 (EDE)

2TDEA (2-key Triple Data Encryption Algorithm)

- 2개의 키를 이용해 EDE

3TDEA (3-key Triple Data Encryption Algorithm)

- 3개의 키를 이용해 EDE

DES라고 마냥 취약한건 아님!

.image http://jjalbox.com/_data/jjalbox/2016/08/20160820_57b81f88a0b3b.jpg _ 200
.caption 이래 봬도 권고임 ㅋ


* 더 새로운 데이터 암호에 대한 필요성

클린 앤 클리어

.image http://www.beautyhankook.com/news/photo/201302/6371_18466_517.jpg _ 200
.caption 깨끗하게 맑게 자신있게~! -_-;

입찰 방식의 공모

- 미 NSA는 '더' 안전하고 강력한 암호를 위해 클린하고 클리어한(것 같은) 공모로 모집함
.image http://cfile22.uf.tistory.com/image/26489F345596310E39E76C _ 100



* Rijndeal 알고리즘

AES로 선정된 벨기에산 암호

.image http://www.datamorgana.net/_/rsrc/1430940930629/gdata/jdvraes.jpg?height=200&width=320
.caption Joan Daemen & Vincent Rijmen

- 128/192/256비트 키를 유동적으로 사용
- SP(Substitution-Permutation) 네트워크 구조의 심플하고 빠르고 효율적인 동작
- 어찌됐든 현재 가장 널리 쓰이는 암호

* AES 

SPN (Substitution-Permutation Network)

	128비트 데이터 블록을..
	128/192/256비트 키로..
	4가지 작업을 반복해서.. (각 작업은 역산 가능한 연산)
	10/12/14 라운드 수행

.image https://i.stack.imgur.com/SnHH2.png _ 400

* SubBytes

.image http://127.0.0.1:3999/public/resources/subbytes.png

* ShiftRows

.image http://127.0.0.1:3999/public/resources/shiftrows.png

* MixColumns

	덧셈 : GF(2) 상에서의 덧셈연산(xor 연산과 동일)
	곱셈 : 특정 기약다항식을 가진 GF(2^8)상의 모듈로 연산

.image http://127.0.0.1:3999/public/resources/mixcolumns.png _ 700

* AddRoundKey

.image http://127.0.0.1:3999/public/resources/addroundkey.png

* 키 스케줄링 - RotWord

.image http://127.0.0.1:3999/public/resources/key_rotword.png

* 키 스케줄링 - SubBytes

.image http://127.0.0.1:3999/public/resources/key_subbytes.png

* 키 스케줄링 - RoundConstant

.image http://127.0.0.1:3999/public/resources/key_rcon.png

* 완성된 라운드 키

.image http://127.0.0.1:3999/public/resources/key_roundkey.png

* AES의 단 하나의 장점을 꼽으라면?

매우 빠름

- 현대 32(*n)비트 아키텍쳐에서 매우 효율적으로 동작하도록 구현 가능
- 거기에 요새는 HW레벨에서 지원함

.image http://www.trscaler.com/technology/ssloveraesni/aes3.png
.caption 이젠 느려져서 데이터 암호화 못한다는 핑계는 좀....


* 블록 암호 운용 모드

기밀성

- ECB (Electric Code Book)
- CBC (Cipher Block Chaining)
- CFB (Cipher FeedBack)
- OFB (Output FeedBack)
- CTR (CounTeR)

기밀성 + 인증

- CCM (Counter with CBC-MAC)
- GCM (Galois/Counter Mode)

* 스트림 암호

동기식 스트림 암호

- 키 스트림이 암호화할 데이터와 독립적으로 생성
- 키 스트림을 미리 생성해 놓을 수 있음
- RC4

비동기식(자기 동기식) 스트림 암호

- 난수 스트림이 암호화할 데이터에 의존적으로 생성
- 다음 메시지 블록이 도착하기 전까지 다음 키 스트림을 미리 생성해 놓을 수 없음
- 블록 암호의 CFB 모드

블록 암호와 스트림 암호의 실제적 차이

- 스트림 암호도 어찌됐건간에 블록 단위로 나뉘어 암/복호화 됨 -_-;
- 암복호화 과정 중에 암호화할 데이터(평문)가 직접적으로 변조된 다음 키가 적용되느냐 아니냐


* 동기식 스트림 암호
RC4

- Rivest Cipher (또는 Ron's Code) 4
- 비권고 알고리즘
- 동작

	1. 키 스트림 생성
	2. 평문/암호문과 xor
	3. 끝ㅋ


* RC4 키 스케줄링

- 입력된 키(IV)를 이용해 256바이트 배열을 셔플하여 난수 스트림 생성
- 난수 스트림을 이용해 필요한 만큼의 키 값을 연속해서 생성 => 키 스트림

.image http://flylib.com/books/3/190/1/html/2/images/06fig09.jpg _ 500


* 자기 동기식 스트림 암호
CFB 모드의 블록 암호

- 안전한 스트림 암호라고 할 수 있음

.image https://upload.wikimedia.org/wikipedia/commons/f/fd/Cfb_encryption.png _ 600



* 권고 암호 알고리즘

.image http://127.0.0.1:3999/public/resources/recommand.png _ 600

* 결정적 문제

이걸로 안전성은 차고 넘치는데 뭐가 문제?

- 대칭키는 키가 키임... 지켜야할 키 개수가 너무 많아짐

.image http://upload2.inven.co.kr/upload/2017/03/15/bbs/i13149538099.jpg _ 200

- 키 교환/분배를 어떻게 할건지

.image http://cythumb.cyworld.com/810x0/c2down.cyworld.co.kr/download?fid=64222e0e664c0f0e50562e39425ee002&name=00001jhl.jpg _ 300

* 디피와 헬만

키를 꼭 감춰야만 하는가?
.image https://static01.nyt.com/images/2016/03/02/business/02turing2/02turing2-facebookJumbo.jpg _ 300
.caption '야 내가 어제 풀어보니까 이산대수 문제가 겁나 어렵던데...'

동일 값을 계산해내기 위한 비공개 값과 공개 값에 대한 개념 제시 (New directions in cryptography, 1976)

- Diffie-Hellman key exchange protocol 설계
- 암호화/복호화가 아님

* Diffie-Hellman key exchange protocol
.image http://blog.trendmicro.com/trendlabs-security-intelligence/files/2015/09/anglerek_dh_01.jpg

* Diffie-Hellman key exchange protocol
.image http://blog.trendmicro.com/trendlabs-security-intelligence/files/2015/09/anglerek_dh_02b.jpg

* 2년 후...

.image https://s-media-cache-ak0.pinimg.com/736x/74/02/13/740213d64d1c67b963c796b43bb42c63--inventors-ron.jpg
.caption 기분탓인지 왠지 멋있어 보임...

Rivest, Shamir, Adleman은 DH의 한계점 극복을 위한, 실용적으로 사용할 수 있는 암호기법 제시

- 키교환과 서명에 이용됨

* RSA 알고리즘

.image http://flylib.com/books/3/190/1/html/2/images/09fig05.jpg

* 왜? 어째서 안전한가?
수학 난제 중 하나인 P-NP 문제 (P=NP인지 P!=NP인지?)

소인수 분해 문제 -> RSA

이산 대수 문제 -> DH, ECC, ElGamal

	아직 아무도 못 풀었으니 푼 사람 나올때까지 안전하다고 생각하자...

.image http://cache.ppomppu.co.kr/zboard/data3/2017/0825/m_20170825112118_ysvnkhqu.jpg _ 200

* 공개키 방식 암호의 단점

느림...ㅠㅠ

- 컴퓨터는 수포자 ㅠ

.image http://i.imgur.com/PnMr5FB.jpg _ 200

- RSA는 블록암호 대비 100~1000배 또는 그 이상 느림
- 이럼 못쓰지...?

.image http://upload2.inven.co.kr/upload/2016/02/25/bbs/i12374308517.gif _ 200
.caption 답정너 ㅋ;

* 하이브리드 암호

대칭키 방식 암호 + 공개키 방식 암호

- 실질적 데이터 암호화는 대칭키 방식의 암호로
- '대칭키'를 교환/분배할때 공개키 방식의 암호로!

.image https://pbs.twimg.com/media/CAuAk0WUYAAC1Eu.jpg _ 250

대표적 사례

- SSL/TLS
- 랜섬웨...

* 근데 또 문제...

공개키의 신뢰성

.image http://cythumb.cyworld.com/810x0/c2down.cyworld.co.kr/download?fid=64222e0e664c0f0e50562e39425ee002&name=00001jhl.jpg _ 300

공개키는 공개되는 것이기 때문에 위/변조의 문제가 있음

.image http://i.imgur.com/PnMr5FB.jpg _ 300

* Root of Trust

아무도 못믿으면 어떻게 사나...

.image https://www.sepago.com/files/drupal/migrated_files/users/nicholas/p2f1.png _ 500
.caption 그래도 우리... 쟤는 믿자...

* PKI (Public Key Infrastructure)

.image http://weekly1.chosun.com/site/data/img_dir/2005/11/03/2005110377001_01.jpg

Q. 그럼 공개키를 이용한 인증은 어떻게?

* 전자서명

전자서명

.image http://cfile22.uf.tistory.com/image/132D25254BFC00366097CC _ 450

인증서란

- 공개키 + 이 공개키에 대해 내가 믿는 녀석이 서명한 값

* 인증서 체이닝
.image https://www.fir3net.com/images/legacy/PKI_ChainofTrust-Chain.png _ 700
.caption 내가 믿는 녀석이 믿는 녀석...-_-;

* 관련 표준

X.509

- 인증서 표준 포맷
.link https://en.wikipedia.org/wiki/X.509
PKCS (Public Key Cryptography Standard)

- 공개키 기반 모든 기술의 표준의 총망라
.link https://en.wikipedia.org/wiki/PKCS


* SSL (Secure Socket Layer)
OSI 7 Layers

- 소켓은 응용계층 - 전송계층 사이 데이터가 오고가는 논리적 채널
.image http://nhprice.com/wp-content/uploads/2013/03/1-Tutorial-OSI-7-layer-model.jpg _ 400

- SSL은 이 소켓에 데이터가 통과될 때 자동으로 암/복호화를 수행해주는 프로토콜
- SSL은 통신 채널에 대한 '기밀성', '무결성', '인증'을 제공

* SSL 스택

TCP
.image http://qwefgh90.github.io/sphinx/_images/sslstack.jpg _ 500

UDP
.image https://www.cse.wustl.edu/~jain/cse574-14/ftp/coap/fig9.gif

* SSL에서 실질적인 채널 암호화

대칭키 암호 방식을 이용

그럼 가장 중요한건 뭐?

- 키ㅋ

.image http://bbs.tunaground.net/dat/situplay/1480157157/images/1480172331%EC%94%A8%EC%9D%B5.jpg _ 200
.caption 키... 너란 녀석은...

채널 암호화는 대칭키 암호를 쓰고, 그 대칭키 합의에 공개키 암호를 이용함

- 하이브리드 암호를 이용한 대표적인 프로토콜


* SSL 핸드셰이크

.image http://www.rfwireless-world.com/images/SSL-handshake-protocol.jpg

.link https://goo.gl/bK1GRo

* SSL Cipher Suite

표준 SSL 통신을 위해 여러가지 암호 기술을 세트 형식으로 정의해 둠

.image http://127.0.0.1:3999/public/resources/ciphersuite.png

.link https://www.openssl.org/docs/man1.1.0/apps/ciphers.html

* SSL의 안전성

이제 사용 여부는 논외! 어떻게 쓰는지가 중요함

대표적 타겟인 IoT 장비

- 이제 왠만한 제품은 거의 SSL이 적용되어 있음

.image http://mblogthumb4.phinf.naver.net/20160609_119/dotsla078_14654086714342P6rc_PNG/2.png?type=w800
.caption 훗. 과연?

* MITM 사례

.image http://127.0.0.1:3999/public/resources/mitm1.png _ 900

* MITM 사례

.image http://127.0.0.1:3999/public/resources/mitm2.png _ 1000

* MITM 사례

.image http://127.0.0.1:3999/public/resources/mitm3.png _ 1000

* MITM 사례

.image http://127.0.0.1:3999/public/resources/mitm4.png _ 1000

* 공격 성공 이유??

구조상 자가서명 인증서를 이용할 것으로 추정

- 인증을 권고대로 수행하지 않음
- 자가서명 인증서를 이용한 개발 시 비일비재

SSL 핸드셰이크의 인증서 검증 모드

- None : 인증서 검증을 수행하지 않음
- Optional : 인증서 검증을 수행하지만 실패해도 진행
- Required : 인증서 검증이 성공해야만 진행

Required 인증 모드였어도 디바이스가 가지고 있는 서버 인증서 교체 가능

- 때문에, 내장되어 있는 CA인증서들은 반드시 무결성 보장이 필요함


* 잡설) 우리나라 공인인증서 시스템의 비애

이게 다 공인인증서 때문이다!

.image http://127.0.0.1:3999/public/resources/rage.png _ 600


* 오해는 풀고 갑시다

전자상거래 시스템에 필수적인 기술

- '인증'과 '부인방지'

이를 해결하기 위한 가장 효율적인 방법 중 하나가 공인인증서 시스템

- 공인인증서 자체는 매우 안전하고 효율적인 시스템

사용자에게 책임을 전가한다?

- 공인인증서가 위협당한 시나리오를 가정할 때, 사용자에게 책임을 묻지 않는 경우는 어디에도 없음

그럼 뭐가 문제??

.image http://timetree.zumst.com/2014/03/27/10/e2bbe33c9f314a5c92dd9625ba3417e0.png _ 300

* 구현 방식과 법

망할놈의 공인인증서 (X)

- 망할놈의 윈도우즈 운영체제만을 고려한 엑티브엑스 기반 보안 구현체들
- 망할놈의 공인인증서를 잘 알려진 디렉토리에 사용자 패스워드만으로 암호화 하여 보관하는 것
- 망할놈의 로컬 시스템 침해 대응의 수단으로 키로거/트로이 등 악성 프로세스 탐지 프로그램 설치를 강제한 것

망할놈의 법 (△)

- 망할놈의 최저 지향적인 양형 기준 (감경 위주 처벌)
- 망할놈의 기업 친화적 법률제도

.link https://namu.wiki/w/%EA%B3%B5%EC%9D%B8%EC%9D%B8%EC%A6%9D%EC%84%9C

* 해시

메시지 다이제스트

- 어떠한 입력값이든 일정한 출력값을 생성

암호를 위한 해시는 조건이 있음

- 압축성 (Compression)
- 효율성 (Efficiency)
- 단방향성 (One-way)
- 약한충돌방지 (Weak-collision resistance) : 비둘기 찾기
- 강한충돌방지 (Strong-collision resistance) : 생일빵ㅋ

* 비둘기집과 생일빵

비둘기 집의 원리

- 비둘기 칸이 10개, 비둘기가 11마리... 어떤 칸에는 비둘기 2마리 이상이 있겠네?

.image http://www.ilyoseoul.co.kr/news/photo/201302/79307_36140_5012.jpg _ 150

- 그럼 비둘기 2마리 이상이 있는 칸을 찾으려면?

생일 역설 문제 (Birthday paradox)

- N명이 있을 때, 생일빵 맞을 사람이 2명이 될 확률이 50% 이상이려면 N은 적어도 몇이어야 하나?
- 생일이 같은 2명 찾기 vs. 같은 해시값을 같은 두 입력값 찾기

* 비트코인 채굴 (Mining)

원래 채굴은 비둘기 찾기였음 : 어떤 SHA256 해시값이 나오는 입력값 찾기

.image http://2runzzal.com/uploads/zpicture/thum/eb2d1fd4b83ba9d87c711625be7db248c6ec5ff0c0bad0f3dc57ce7109551061.jpg

어떤 '조건'인 해시값이 나오는 입력값 찾기

.image http://mblogthumb1.phinf.naver.net/20150703_272/saewho2_1435931688576AHrKf_JPEG/20150620_233814_1193953499.jpg?type=w2 _ 200
.caption 솔깃

* Hashcash 문제

해시값이 '000'으로 시작하는 nonce를 가장 빨리 찾으시오

	SHA-256 ("hello world" + " 0") = 3cad76d283686392c9c1813baf25239a3f09b9e075d830984a9a93d62b93adb8  
	SHA-256 ("hello world" + " 1") = 063dbf1d36387944a5f0ace625b4d3ee36b2daefd8bdaee5ede723637efb1cf4  
	SHA-256 ("hello world" + " 2") = ed12932f3ef94c0792fbc55263968006e867e522cf9faa88274340a2671d4441  
	SHA-256 ("hello world" + " 3") = 4ffabbab4e763202462df1f59811944121588f0567f55bce581a0e99ebcf6606  
	SHA-256 ("hello world" + " 4") = 000e5e410dd915d190cce21d72a40bdbcc9db96d80de87d28896b56766f31b4e  
	SHA-256 ("hello world" + " 5") = f6471bb5cd1837f3ef4891903c40c5300c9f0fd8a902d5c3774628c44dab78ed  
	SHA-256 ("hello world" + " 6") = 6a9b5a89258b50744dfdf62e49ac6d869e8916e04ce57d9d1fc953daed9bfcd8

조건이 길어질 수록 문제는 어려워짐! = 푸는데 시간이 오래 걸림

* 해독 이론의 구분

COA (Ciphertext Only Attack)
CPA (Chosen Plaintext Attack)
CCA (Chosen Ciphertext Attack)
KPA (Known Plaintext Attack)

* 해독 이론
Brute force
> _Pollard's_ _rho_ _algorithm_
> _MITM_
> _time-space_ _trade_ _off_
Slide attack
Multi-table approach
Distinguished endpoint
> _Rainbow_ _table_
> _Birthday_ _paradox_
> _Linear_ _cryptanalysis_
> _Differential_ _cryptanalysis_
> _Side_ _channel_ _attack_
 ....

To be continued...

* RSA관련 문제 한문제

MeePwn CTF 1st 2017, Crypto 섹션, Simpler than RSA

.link https://github.com/DDOS-Attacks/ctf-writeups/tree/master/2017/MeePwn%20CTF%201st%202017/Crypto/Simpler%20than%20RSA

	기존의 n, e 등을 주고 소인수분해 해서 p, q를 구한 담에 private key 찾아서 복호화 하는 방식은 이젠 식상..
	이 문제는 공개키 방식의 기반 이론인 오일러 토션트, 모듈러 속성의 개념을 확실히 알아야 풀 수 있는 문제임