6th BoB Crypto Session
29 Aug, 2017

고탁균
hazyheyjude@gmail.com




* 시작하기 전에
오늘 이야기할 내용

- 현대 암호와 해독 접근 방법

	대칭키 암호
	공개키 암호
	PKI
	SSL
	암호 해독 이론

하지 않을 내용

- 수학 (나도 잘 모름ㅋ)




* 현대 암호 분류

대칭키 암호 (= 비밀키 암호, 관용 암호)

- 블록 암호
- 스트림 암호

공개키 암호 (= 비대칭키 암호)

- 소인수분해 기반
- 이산대수 기반

메시지 다이제스트 (= 해시)




* 현대 암호 해독 분류

Ciphertext Only Attack (COA)

Chosen Plaintext Attack (CPA)

Chosen Ciphertext Attack (CCA)

Known Plaintext Attack (KPA)




* 블록 암호의 설계

확산과 혼돈

- 갓섀넌이 제시한 현대 블록 암호의 근간 원칙
- 암호 알고리즘의 통계적 분석을 어렵게 함

혼돈(Confusion)

- 암호 알고리즘의 입력 중 평문을 1비트 바꿨을 때, 암호문의 출력은 예측 불가해야 함
- ex) 0x0001을 암호화 한 값이 0x0002를 암호화 한 값과 n만큼 차이가 나더라...
- 보통 치환(substitution)으로 구현


확산(Diffusion)

- 평문 1비트 변경이, 출력되는 암호문의 여러 비트에 영향을 줘야 함
- ex) 0x0000을 암호화 한 값과 0x0010을 암호화 한 값이 1비트만 다르더라...
- 보통 순열(permutation)으로 구현


* 새로운 데이터 암호에 대한 필요성

클린 앤 클리어

.image http://www.beautyhankook.com/news/photo/201302/6371_18466_517.jpg _ 200
.caption 깨끗하게 맑게 자신있게~! -_-;

입찰 방식의 공모

- 미 NSA는 안전하고 강력한 암호를 위해 클린하고 클리어한 공모로 모집함
.image http://cfile22.uf.tistory.com/image/26489F345596310E39E76C _ 100


* 데이터 암호 표준 (Data Encryption Standard)

DES

- IBM의 Feistel이 고안한 Lucifer 암호 기반
- 최초의 데이터 암호 표준으로 선정하고 DES라는 이름을 붙임

Feistel 네트워크 방식

- 단순한 회전을 여러번 반복한 구조

.image http://alessiorolleri.wikidot.com/local--files/cifrario-feistel/feistel.png _ 250




* DES의 암호화

	평문을 64비트 단위 블록으로 쪼갬
	쪼갠 블록을 다시 오른쪽 32비트(R0)와 왼쪽 32비트(L0)로 나눔
	초기 64비트 키를 이용해 16개의 48비트 라운드 키(K0~K15)를 계산함

	<1 라운드>
	1. R0과 라운드 키 K0을 라운드 함수 F에 넣어 결과 R0'를 얻음
	2. R0'와 L0을 xor해서 R1로 만듬
	3. R0을 L1로 만듬

	라운드 반복
	...

	<16 라운드>
	1. R14와 라운드 키 K14를 라운드 함수 F에 넣어 결과 R14'를 얻음
	2. R14'와 L14을 xor해서 R15를 만듬
	3. R14를 최종R로 만듬
	4. R15를 최종L로 만듬
	
	암호화된 블록 = 최종L + 최종R

* DES의 암호화

.image https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Feistel_cipher_diagram_en.svg/511px-Feistel_cipher_diagram_en.svg.png _ 350

* DES의 키 스케줄링

.image https://www.projectrhea.org/rhea/images/4/4e/KS3.png _ 350

* DES의 라운드 함수

.image https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Data_Encription_Standard_Flow_Diagram.svg/375px-Data_Encription_Standard_Flow_Diagram.svg.png
.caption 32bits Block

* DES의 취약점 - Small key space

키 사이즈가 작기 때문에 전사 공격에 취약함

- 실제 사용되는 키 데이터는 56비트
- 1999년 DES 크랙 전용 시스템을 이용해 22시간만에 깨짐

.image https://upload.wikimedia.org/wikipedia/commons/b/bd/Board300.jpg _ 300

* DES의 취약점 - 취약한 키 입력값

- 취약키 4개 : E(E(p, k), k) = p

	0x0101010101010101 -> 0x0000000000000000
	0xFEFEFEFEFEFEFEFE -> 0x00000000FFFFFFFF
	0xE0E0E0E0E0E0E0E0 -> 0xFFFFFFFF00000000
	0x1F1F1F1F1F1F1F1F -> 0xFFFFFFFFFFFFFFFF

	=> 동일한 라운드키만 생성됨

- 준취약키 6쌍 : E(E(p, k1), k2) = P

	k1 : 011F011F010E010E, k2 : 1F011F010E010E01
	k1 : 01E001E001F101F1, k2 : E001E001F101F101
	k1 : 01FE01FE01FE01FE, k2 : FE01FE01FE01FE01
	k1 : 1FE01FE00EF10EF1, k2 : E01FE01FF10EF10E
	k1 : 1FFE1FFE0EFE0EFE, k2 : FE1FFE1FFE0EFE0E
	k1 : E0FEE0FEF1FEF1FE, k2 : FEE0FEE0FEF1FEF1

	=> 2개의 라운드 키가 교차적으로 생성됨

* 3DES

단순한 키 확장 방식

- 암호화 -> 복호화 -> 암호화 (EDE)

2TDEA (2-key Triple Data Encryption Algorithm)

- 2개의 키를 이용해 EDE

3TDEA (3-key Triple Data Encryption Algorithm)

- 3개의 키를 이용해 EDE

DES라고 마냥 취약한건 아님!

.image http://jjalbox.com/_data/jjalbox/2016/08/20160820_57b81f88a0b3b.jpg _ 200
.caption 이래 봬도 권고임 ㅋ


* 더 새로운 데이터 암호에 대한 필요성

클린 앤 클리어??

.image http://127.0.0.1:3999/public/resources/notclean.png _ 400
.caption 글쎄ㅋ

또 입찰 방식의 공모

- 미 NSA는 '더' 안전하고 강력한 암호를 위해 클린하고 클리어한(것 같은) 공모로 모집함


* AES (Advanced Encryption Standard)

Rijndeal 알고리즘 당첨

.image http://www.datamorgana.net/_/rsrc/1430940930629/gdata/jdvraes.jpg?height=200&width=320
.caption Joan Daemen & Vincent Rijmen

- 128/192/256비트 키를 유동적으로 사용
- SP 네트워크 구조의 심플하고 빠르고 효율적인 동작
- 어찌됐든 현존 가장 널리 쓰이는 암호



* SPN (Substitution-Permutation Network)









* 스트림 암호

동기식 스트림 암호

- 키 스트림이 암호화할 데이터와 독립적으로 생성
- 키 스트림을 미리 생성해 놓을 수 있음
- RC4

비동기식(자기 동기식) 스트림 암호

- 난수 스트림이 암호화할 데이터에 의존적으로 생성
- 다음 메시지 블록이 도착하기 전까지 다음 키 스트림을 미리 생성해 놓을 수 없음
- 블록 암호의 CFB 모드

블록 암호와 스트림 암호의 실제적 차이

- 스트림 암호도 어찌됐건간에 블록 단위로 나뉘어 암/복호화 됨 -_-;
- 암복호화 과정 중에 암호화할 데이터(평문)가 직접적으로 변조된 다음 키가 적용되느냐 아니냐




* 동기식 스트림 암호
RC4

- Rivest Cipher (또는 Ron's Code) 4
- 비권고 알고리즘
- 동작

	1. 키 스트림 생성
	2. 평문/암호문과 xor
	3. 끝ㅋ




* RC4 키 스케줄링

- 입력된 키(IV)를 이용해 256바이트 배열을 셔플하여 난수 스트림 생성
- 난수 스트림을 이용해 필요한 만큼의 키 값을 연속해서 생성 => 키 스트림

.image http://flylib.com/books/3/190/1/html/2/images/06fig09.jpg _ 500




* 자기 동기식 스트림 암호
CFB 모드

- 안전한 스트림 암호라고 할 수 있음

.image https://upload.wikimedia.org/wikipedia/commons/f/fd/Cfb_encryption.png _ 600




* 내용


SPN
AES
블록 암호 모드
블록 암호 패딩




결정적 문제 = 키 교환/분배
비대칭키 암호
디피헬만과 RSA
왜? 어째서 안전한가?
P = NP ?
소인수 분해 문제
RSA
이산 대수 문제
디피헬만
타원곡선
메시지 다이제스
SSL
HTTPS




----------------------------------------


해독 이론의 정립 

- COA
- CPA
- CCA
- KPA
- 원문선택

해독 방법 이론

- brute force
- pollard's rho algorithm
- Time vs. space
	mitm
	time-space trade off
	slide attack
	multi-table approach
	distinguished endpoint
- rainbow table
- birthday paradox
- slide attack
- linear cryptanalysis
- differential cryptanalysis


